// C:\Users\Hp\final-project\app\login\page.js   // app/login/page.js or pages/login.js
// "use client";
// import React from 'react';
// import Login from '../../frontend/components/Login';

// const LoginPage = () => {
//   console.log('LoginPage is rendering'); // Add this line
//   return (
//     <div>
//       <h1>Login</h1>
//       <Login />
//     </div>
//   );
// };

// export default LoginPage;
// C:\Users\Hp\final-project\app\protected\page.js   // app/pages/Protected.js
// import React from 'react';
// import ProtectedComponent from '../../frontend/components/ProtectedComponent';

// const ProtectedPage = () => {
//   return (
//     <div>
//       <h1>Protected Page</h1>
//       <ProtectedComponent />
//     </div>
//   );
// };

// export default ProtectedPage;
// C:\Users\Hp\final-project\app\register\page.js  "use client";
// import React from 'react';
// import Register from '../../frontend/components/Register';

// const RegisterPage = () => {
//   return (
//     <div>
//       <h1>Register</h1>
//       <Register />
//     </div>
//   );
// };

// export default RegisterPage;
// C:\Users\Hp\final-project\app\layout.js   // app/layout.js
// import { Inter } from "next/font/google";
// import "./globals.css";
// import { GlobalStateProvider } from '../frontend/context/GlobalState'; // Adjust the path as necessary

// const inter = Inter({ subsets: ["latin"] });

// export const metadata = {
//   title: "Final Project",
//   description: "Generated by create next app",
// };

// export default function RootLayout({ children }) {
//   return (
//     <html lang="en">
//       <body className={inter.className}>
//         <GlobalStateProvider>
//           {children}
//         </GlobalStateProvider>
//       </body>
//     </html>
//   );
// }
// C:\Users\Hp\final-project\app\page.js    "use client";
// import React from 'react';
// import ProductList from '../components/ProductList';
// import Checkout from '../frontend/components/Checkout';
// import Link from 'next/link';



// const HomePage = () => {
//   return (
//     <div>
//       <h1>Product Listing</h1>
//       <nav>
//         <Link href="/login">Login</Link>
//         <Link href="/register">Register</Link>
//         <Link href="/protected">Protected</Link>
//       </nav>
//       <ProductList />
//       <Checkout />
//     </div>
//   );
// };

// export default HomePage;
// C:\Users\Hp\final-project\backend\middleware\auth.js   const jwt = require('jsonwebtoken');

// module.exports = function (req, res, next) {
//     const token = req.header('Authorization')?.replace('Bearer ', '');
//     if (!token) return res.status(401).json({ message: 'No token, authorization denied' });

//     try {
//         const decoded = jwt.verify(token, process.env.JWT_SECRET);
//         req.user = decoded;
//         next();
//     } catch (err) {
//         res.status(401).json({ message: 'Token is not valid' });
//     }
// };
// C:\Users\Hp\final-project\backend\models\Order.js   const mongoose = require('mongoose');
// const Schema = mongoose.Schema;

// const OrderSchema = new Schema({
//     user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
//     products: [{ product: { type: Schema.Types.ObjectId, ref: 'Product' }, quantity: { type: Number, default: 1 } }],
//     total: { type: Number, required: true },
//     status: { type: String, default: 'Pending' },
//     createdAt: { type: Date, default: Date.now }
// });

// module.exports = mongoose.model('Order', OrderSchema);
// C:\Users\Hp\final-project\backend\models\Product.js   const mongoose = require('mongoose');
// const Schema = mongoose.Schema;

// const ProductSchema = new Schema({
//     name: { type: String, required: true },
//     description: { type: String, required: true },
//     price: { type: Number, required: true },
//     category: { type: String, required: true },
//     stock: { type: Number, default: 0 }
// });

// module.exports = mongoose.model('Product', ProductSchema);
// C:\Users\Hp\final-project\backend\models\User.js   const mongoose = require('mongoose');

// const UserSchema = new mongoose.Schema({
//     username: {
//         type: String,
//         required: true,
//         unique: true,
//     },
//     name: {
//         type: String,
//         required: true,
//     },
//     email: {
//         type: String,
//         required: true,
//         unique: true,
//     },
//     password: {
//         type: String,
//         required: true,
//     },
// });

// module.exports = mongoose.model('User', UserSchema);
// C:\Users\Hp\final-project\backend\routes\orders.js   const express = require('express');
// const router = express.Router();
// const Order = require('../models/Order');
// const auth = require('../middleware/auth'); // Middleware for authentication

// // Get all orders (Admin)
// router.get('/', auth, async (req, res) => {
//     try {
//         const orders = await Order.find().populate('user').populate('products.product');
//         res.json(orders);
//     } catch (err) {
//         res.status(500).json({ error: err.message });
//     }
// });

// // Create a new order
// router.post('/', auth, async (req, res) => {
//     const { products, total } = req.body;
//     try {
//         const order = new Order({ user: req.user.id, products, total });
//         await order.save();
//         res.status(201).json(order);
//     } catch (err) {
//         res.status(500).json({ error: err.message });
//     }
// });

// module.exports = router;
// C:\Users\Hp\final-project\backend\routes\products.js   const express = require('express');
// const router = express.Router();
// const Product = require('../models/Product');

// // Get all products
// router.get('/', async (req, res) => {
//     try {
//         const products = await Product.find();
//         res.json(products);
//     } catch (err) {
//         res.status(500).json({ error: err.message });
//     }
// });

// // Create a new product
// router.post('/', async (req, res) => {
//     const { name, description, price, category, stock } = req.body;
//     try {
//         const product = new Product({ name, description, price, category, stock });
//         await product.save();
//         res.status(201).json(product);
//     } catch (err) {
//         res.status(500).json({ error: err.message });
//     }
// });

// module.exports = router;
// C:\Users\Hp\final-project\backend\routes\users.js   const express = require('express');
// const router = express.Router();
// const User = require('../models/User');
// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');



// router.post('/register', async (req, res) => {
//     try {
//         const { username, name, email, password } = req.body;

//         // Validate the input
//         if (!username || !name || !email || !password) {
//             return res.status(400).json({ error: 'All fields are required' });
//         }

//         // Check if the user already exists
//         const existingUser = await User.findOne({ email });
//         if (existingUser) {
//             return res.status(400).json({ error: 'User already exists' });
//         }

//         // Hash the password
//         const hashedPassword = await bcrypt.hash(password, 10);

//         // Create a new user
//         const newUser = new User({ username, name, email, password: hashedPassword });
//         await newUser.save();

//         res.status(201).json({ message: 'User registered successfully' });
//     } catch (err) {
//         console.error(err); // Improved error logging
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// });

// module.exports = router;


// // User login
// router.post('/login', async (req, res) => {
//     const { email, password } = req.body;

//     // Validate the input
//     if (!email || !password) {
//         return res.status(400).json({ error: 'Email and password are required' });
//     }

//     try {
//         // Check if the user exists
//         const user = await User.findOne({ email });
//         if (!user) {
//             return res.status(404).json({ error: 'User not found' });
//         }

//         // Compare the password
//         const isMatch = await bcrypt.compare(password, user.password);
//         if (!isMatch) {
//             return res.status(400).json({ error: 'Invalid credentials' });
//         }

//         // Generate a token
//         const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

//         // Send the token and user information
//         res.json({ token, user });
//     } catch (err) {
//         console.error('Error during user login:', err); // Improved error logging
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// });

// module.exports = router;
// C:\Users\Hp\final-project\backend\index.js     
// require('dotenv').config()
// const express = require('express');
// const mongoose = require('mongoose');
// const app = express();
// const cors = require('cors');
// const port = process.env.PORT || 5000;

// // Load environment variables from .env file


// app.use(express.json());
// app.use(cors());
// mongoose.connect(process.env.MONGODB_URI, {
    
//     serverSelectionTimeoutMS: 30000, // 30 seconds
//     socketTimeoutMS: 45000, // 45 seconds
// })
// .then(() => console.log('MongoDB connected...'))
// .catch(err => console.log('MongoDB connection error:', err));

// app.use('/api/users', require('./routes/users'));
// app.use('/api/products', require('./routes/products'));
// app.use('/api/orders', require('./routes/orders'));


// app.get('/', (req, res) => {
//     res.send('API is running...');
// });

// app.listen(port, () => {
//     console.log(`Server running on http://localhost:${port}`);
// });
// C:\Users\Hp\final-project\components\ProductCart.js    
// "use client";
// import React from 'react';

// const ProductCart = ({ product }) => {
//   return (
//     <div className="border p-4">
//       <h2 className="text-lg font-bold">{product.name}</h2>
//       <p>{product.description}</p>
//       <p>${product.price}</p>
//     </div>
//   );
// };

// export default ProductCart;
// C:\Users\Hp\final-project\components\ProductList.js    "use client";
// import React, { useEffect, useState } from 'react';
// import axios from '../frontend/utils/axios';
// import ProductCart from './ProductCart';

// const ProductList = () => {
//   const [products, setProducts] = useState([]);

//   useEffect(() => {
//     const fetchProducts = async () => {
//       try {
//         const res = await axios.get('http://localhost:5000/api/products');
//         console.log(res.data);  // Log the response data
//         setProducts(res.data);
//       } catch (err) {
//         console.error(err);
//       }
//     };
  
//     fetchProducts();
//   }, []);
  
  

//   return (
//     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//       {products.map((product) => (
//         <ProductCart key={product._id} product={product} />
//       ))}
//     </div>
//   );
// };

// export default ProductList;
// C:\Users\Hp\final-project\frontend\components\Checkout.js    
// import React from 'react';
// import FakePayment from '../components/FakePayment';

// const Checkout = () => {
//   const handlePaymentSuccess = () => {
//     // Handle what happens after a successful payment
//     alert('Payment Successful!');
//   };

//   return (
//     <div>
//       <h2>Checkout</h2>
//       <FakePayment onSuccess={handlePaymentSuccess} />
//     </div>
//   );
// };

// export default Checkout;
// C:\Users\Hp\final-project\frontend\components\FakePayment.js   // components/FakePayment.js
// import React, { useState } from 'react';

// const FakePayment = ({ onSuccess }) => {
//   const [isProcessing, setIsProcessing] = useState(false);

//   const handlePayment = () => {
//     setIsProcessing(true);
//     setTimeout(() => {
//       setIsProcessing(false);
//       onSuccess();
//     }, 2000); // Simulate a 2-second delay for processing
//   };

//   return (
//     <div>
//       <button onClick={handlePayment} disabled={isProcessing}>
//         {isProcessing ? 'Processing...' : 'Pay Now'}
//       </button>
//     </div>
//   );
// };

// export default FakePayment;
// C:\Users\Hp\final-project\frontend\components\Login.js   "use client";
// import React, { useState, useContext } from 'react';
// import axios from 'axios';
// import { GlobalStateContext } from '../context/GlobalState';

// const Login = () => {
//   const [email, setEmail] = useState('');
//   const [password, setPassword] = useState('');
//   const [error, setError] = useState('');
//   const context = useContext(GlobalStateContext);

//   if (!context) {
//     throw new Error('GlobalStateContext is undefined. Ensure the component is wrapped in GlobalStateProvider.');
//   }

//   const { dispatch } = context;

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const res = await axios.post('http://localhost:5000/api/users/login', { email, password });
//       console.log('Login successful:', res.data); // Log success response
//       dispatch({ type: 'SET_USER', payload: res.data.user });
//       localStorage.setItem('token', res.data.token);
//       setError(''); // Clear any previous errors
//     } catch (err) {
//       console.error('Login failed:', err); // Log error response
//       setError(err.response?.data?.error || 'Login failed'); // Handle error response
//     }
//   };

//   return (
//     <form onSubmit={handleSubmit}>
//       <input
//         type="email"
//         id="email"
//         name="email"
//         autocomplete="email"
//         value={email}
//         onChange={(e) => setEmail(e.target.value)}
//         placeholder="Email"
//         required
//       />
//       <input
//         type="password"
//         id="password"
//         name="password"
//         autocomplete="current-password"
//         value={password}
//         onChange={(e) => setPassword(e.target.value)}
//         placeholder="Password"
//         required
//       />
//       <button type="submit">Login</button>
//       {error && <p>{error}</p>}
//     </form>
//   );
// };

// export default Login;
// C:\Users\Hp\final-project\frontend\components\ProtectedComponent.js   "use client"
// // frontend/components/ProtectedComponent.js
// import React, { useEffect, useContext } from 'react';
// import axios from '../utils/axios'; // Use the axios instance with interceptors
// import { GlobalStateContext } from '../context/GlobalState';

// const ProtectedComponent = () => {
//   const { state } = useContext(GlobalStateContext);

//   useEffect(() => {
//     const fetchProtectedData = async () => {
//       try {
//         const res = await axios.get('/orders');
//         console.log('Protected data:', res.data);
//       } catch (err) {
//         console.error('Failed to fetch protected data:', err);
//       }
//     };

//     fetchProtectedData();
//   }, []);

//   return (
//     <div>
//       <h1>Protected Content</h1>
//       {state.user ? <p>Welcome, {state.user.name}</p> : <p>Please log in</p>}
//     </div>
//   );
// };

// export default ProtectedComponent;
// C:\Users\Hp\final-project\frontend\components\Register.js   import React, { useState } from 'react';
// import axios from 'axios';

// const Register = () => {
//   const [username, setUsername] = useState('');
//   const [name, setName] = useState('');
//   const [email, setEmail] = useState('');
//   const [password, setPassword] = useState('');
//   const [error, setError] = useState('');

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post('http://localhost:5000/api/users/register', { username, name, email, password });
//       console.log(response.data.message); // Handle success response
//       setError(''); // Clear any previous errors
//     } catch (err) {
//       setError(err.response?.data?.error || 'Registration failed'); // Handle error response
//     }
//   };

//   return (
//     <form onSubmit={handleSubmit}>
//       <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} placeholder="Username" required />
//       <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Name" required />
//       <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" required />
//       <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" required />
//       <button type="submit">Register</button>
//       {error && <p>{error}</p>}
//     </form>
//   );
// };

// export default Register;
// C:\Users\Hp\final-project\frontend\context\GlobalState.js    "use client"
// // C:\Users\Hp\final-project\context\GlobalState.js
// import React, { createContext, useReducer } from 'react';

// const initialState = {
//   user: null,
//   cart: [],
// };

// const GlobalStateContext = createContext();
// const reducer = (state, action) => {
//   switch (action.type) {
//     case 'SET_USER':
//       return { ...state, user: action.payload };
//     case 'ADD_TO_CART':
//       return { ...state, cart: [...state.cart, action.payload] };
//     case 'REMOVE_FROM_CART':
//       return {
//         ...state,
//         cart: state.cart.filter((item) => item.id !== action.payload),
//       };
//     default:
//       return state;
//   }
// };


// const GlobalStateProvider = ({ children }) => {
//   const [state, dispatch] = useReducer(reducer, initialState);

//   return (
//     <GlobalStateContext.Provider value={{ state, dispatch }}>
//       {children}
//     </GlobalStateContext.Provider>
//   );
// };


// export { GlobalStateContext, GlobalStateProvider };
// C:\Users\Hp\final-project\frontend\utils\axios.js    // frontend/utils/axios.js
// import axios from 'axios';

// const instance = axios.create({
//   baseURL: 'http://localhost:5000/api',
// });

// instance.interceptors.request.use((config) => {
//   const token = localStorage.getItem('token');
//   if (token) {
//     config.headers.Authorization = `Bearer ${token}`;
//   }
//   return config;
// });

// export default instance;
// C:\Users\Hp\final-project\.env     PORT=5000
// MONGODB_URI=mongodb+srv://cellfirstformm:cellfirstformm@cellcluster.5iot12f.mongodb.net/cellcluster?retryWrites=true&w=majority
// JWT_SECRET=fcd9f353b4d16df3d5a60b4288b7b3034ec6401fbf20c2805418ebe9a54fa281
